# First, I will define a Song class to represent each song in the database.

class Song:
    def __init__(self, title, artist, genre, mood, rating):
        self.title = title
        self.artist = artist
        self.genre = genre
        self.mood = mood
        self.rating = rating

    def __repr__(self):
        return f"{self.title} by {self.artist} [{self.genre}, {self.mood}, Rating: {self.rating}]"

# Next, I will create a list of sample songs.

songs_db = [
    Song("Song A", "Artist 1", "Pop", "Happy", 4.5),
    Song("Song B", "Artist 2", "Rock", "Energetic", 4.0),
    Song("Song C", "Artist 3", "Jazz", "Relaxed", 5.0),
    Song("Song D", "Artist 4", "Pop", "Sad", 3.0),
    Song("Song E", "Artist 5", "Classical", "Calm", 4.8),
    Song("Song F", "Artist 6", "Rock", "Happy", 4.2),
    Song("Song G", "Artist 7", "Pop", "Energetic", 4.7),
    Song("Song H", "Artist 8", "Jazz", "Sad", 3.5),
]

# Now, I will define a function that generates a playlist based on user preferences.

import random

def generate_playlist(songs, genre=None, mood=None, min_rating=0):
    filtered_songs = []

    # Filter songs based on user preferences
    for song in songs:
        if (genre is None or song.genre == genre) and \
           (mood is None or song.mood == mood) and \
           (song.rating >= min_rating):
            filtered_songs.append(song)

    # Shuffle the filtered songs for randomness
    random.shuffle(filtered_songs)

    return filtered_songs

#Finally, I can use the algorithm to generate a playlist based on specific criteria.

# User preferences
preferred_genre = "Pop"
preferred_mood = "Happy"
minimum_rating = 4.0

# Generate the playlist
playlist = generate_playlist(songs_db, preferred_genre, preferred_mood, minimum_rating)

# Display the generated playlist
print("Generated Playlist:")
for song in playlist:
    print(song)
